<?php


namespace MezzoLabs\Mezzo\Cockpit\Html\Rendering;

use Collective\Html\FormBuilder as CollectiveFormBuilder;
use Illuminate\Support\Collection;

class FormBuilder extends CollectiveFormBuilder
{
    /**
     * Create a submit button element.
     *
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function submit($value = null, $options = [])
    {
        $options = $this->mergeDefault([
            'class' => 'btn btn-primary btn-block',
            'ng-disabled' => 'vm.form.$invalid'
        ], $options);

        return parent::submit($value, $options);
    }

    /**
     * @param $default
     * @param $options
     * @return array
     */
    protected function mergeDefault($default, $options)
    {
        $default = new Collection($default);
        $options = new Collection($options);

        return $default->merge($options)->toArray();
    }

    /**
     * Open up a new HTML form.
     *
     * @param  array $options
     *
     * @return string
     */
    public function open(array $options = [])
    {
        $options = $this->mergeDefault([
            'name' => "vm.form",
            'novalidate' => 'novalidate',
            'ng-submit' => 'vm.submit()'
        ], $options);

        return parent::open($options);
    }

    /**
     * Create a text input field.
     *
     * @param  string $name
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function text($name, $value = null, $options = [])
    {
        return parent::text($name, $value, $options);
    }

    /**
     * Create an e-mail input field.
     *
     * @param  string $name
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function email($name, $value = null, $options = [])
    {
        return parent::email($name, $value, $options);
    }

    /**
     * Create a time input field.
     *
     * @param  string $name
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function time($name, $value = null, $options = [])
    {
        return parent::time($name, $value, $options);
    }

    /**
     * Create a file input field.
     *
     * @param  string $name
     * @param  array $options
     *
     * @return string
     */
    public function file($name, $options = [])
    {
        return parent::file($name, $options); // TODO: Change the autogenerated stub
    }

    /**
     * Create a textarea input field.
     *
     * @param  string $name
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function textarea($name, $value = null, $options = [])
    {
        return parent::textarea($name, $value, $options);
    }

    /**
     * Create a button element.
     *
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function button($value = null, $options = [])
    {
        return parent::button($value, $options);
    }


    /**
     * Create a form input field.
     *
     * @param  string $type
     * @param  string $name
     * @param  string $value
     * @param  array $options
     *
     * @return string
     */
    public function input($type, $name, $value = null, $options = [])
    {
        if (!isset($options['class']))
            $options['class'] = 'form-control';

        return parent::input($type, $name, $value, $options);
    }
}